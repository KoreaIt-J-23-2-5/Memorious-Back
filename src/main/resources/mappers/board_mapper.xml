<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.memorious.back.repository.BoardMapper">
    <resultMap id="boardMap" type="com.memorious.back.entity.BoardEntity">
        <id property="boardId" column="board_id" />
        <result property="boardTitle" column="board_title" />
        <result property="boardCategoryId" column="board_category_id" />
        <result property="boardContent" column="board_content" />
        <result property="nickname" column="nickname" />
        <result property="createDate" column="board_create_date" />
    </resultMap>
    <resultMap id="boardCategoryMap" type="com.memorious.back.entity.BoardCategoryEntity">
        <id property="boardCategoryId" column="board_category_id" />
        <result property="boardCategoryName" column="board_category_name" />
    </resultMap>
<!--    게시글 상세 데이터 map-->
    <resultMap id="boardDetailsMap" type="com.memorious.back.entity.BoardDetailsEntity">
        <id property="boardId" column="board_id"/>
        <result property="boardCategoryId" column="board_category_id"/>
        <result property="boardCategoryName" column="board_category_name"/>
        <result property="boardTitle" column="board_title"/>
        <result property="boardContent" column="board_content"/>
        <result property="profileUrl" column="profile_url"/>
        <result property="nickname" column="nickname"/>
        <result property="createDate" column="board_create_date"/>
    </resultMap>

    <select id="getBoardCategories" parameterType="integer" resultMap="boardCategoryMap">
        select
            bct.board_category_id,
            bct.board_category_name
        from
        	board_category_tb bct
            left outer join board_tb bt on(bt.board_category_id = bct.board_category_id)
        	left outer join user_tb ut on(ut.nickname = bt.nickname)
        	left outer join member_tb mt on(mt.user_id = ut.user_id)
        	left outer join family_tb ft on(ft.family_id = mt.family_id)
        where
        	ft.family_id = #{familyId}
        group by
            bct.board_category_id;
    </select>

    <select id="getBoardList" parameterType="hashmap" resultMap="boardMap" >
            select
               bt.board_id,
               bt.board_title,
               bt.nickname,
               bt.board_create_date
            from
                board_category_tb bct
                left outer join board_tb bt on(bt.board_category_id=bct.board_category_id)
                left outer join user_tb ut on(ut.nickname = bt.nickname)
                left outer join member_tb mt on(mt.user_id = ut.user_id)
                left outer join family_tb ft on(ft.family_id = mt.family_id)
            where
               ft.family_id = #{familyId}

    <!--        all이 아니면 특정 카테고리명에 따라 검색-->
               <if test="!categoryName.equals('all')">
                    and bct.board_category_name=#{categoryName}
               </if>
               <choose>
                    <when test="optionName.equals('전체')">
                        and (board_title like concat("%", #{searchValue}, "%")
                        or bt.nickname like concat("%", #{searchValue}, "%"))
                    </when>
                  <when test="optionName.equals('제목')">
                     and board_title like concat("%", #{searchValue}, "%")
                  </when>
                  <when test="optionName.equals('작성자')">
                     and bt.nickname like concat("%", #{searchValue}, "%")
                  </when>
               </choose>
            order by
               board_id desc
        </select>

    <!--게시물 상세 조회-->
    <select id="getBoardByBoardId" resultMap="boardDetailsMap">
        select
        	bt.board_id,
            bt.board_category_id,
            bct.board_category_name,
            bt.board_title,
            bt.board_content,
            ut.profile_url,
            bt.nickname,
            bt.board_create_date
        from
        	board_tb bt
            left outer join board_category_tb bct on(bct.board_category_id = bt.board_category_id)
            left outer join user_tb ut on(ut.nickname = bt.nickname)
        where
        	board_id = #{boardId};
    </select>

    <insert id="saveBoardCategory"
            parameterType="com.memorious.back.entity.BoardCategoryEntity"
            useGeneratedKeys="true"
            keyProperty="boardCategoryId">

        insert into board_category_tb
        values (0, #{boardCategoryName})

    </insert>
    <insert id="saveBoardContent" parameterType="com.memorious.back.entity.BoardEntity">
        insert into board_tb
        values (0, #{boardTitle}, #{boardCategoryId}, #{boardContent}, #{nickname}, now())
    </insert>

    <update id="updateBoard">
            update board_tb
            set
                board_title = #{boardTitle},
                board_content = #{boardContent},
                board_category_id = #{boardCategoryId}
            where
                board_id = #{boardId}
    </update>

    <delete id="deleteBoard">
        delete
        from board_tb
        where board_id = #{boardId}
    </delete>
</mapper>